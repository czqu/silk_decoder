// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/silk_decoder.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class SilkDecoderBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SilkDecoderBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SilkDecoderBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int decode_silk_file(
    ffi.Pointer<ffi.Char> input_path,
    ffi.Pointer<ffi.Char> output_path,
    int sample_rate,
  ) {
    return _decode_silk_file(input_path, output_path, sample_rate);
  }

  late final _decode_silk_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('decode_silk_file');
  late final _decode_silk_file = _decode_silk_filePtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();
}
